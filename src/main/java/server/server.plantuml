@startuml

title __SERVER's Class Diagram__\n

  namespace server {
    class server.Board {
        - fields : Field[][]
        - groups : ArrayList<StoneGroup>
        - size : int
        + Board()
        + getField()
        + getGroups()
        + getSize()
        + isEmpty()
        + isInsideBoard()
        + isSameColor()
        + removeGroup()
        + removeTerritory()
        + setGroups()
    }
  }
  

  namespace server {
    interface server.BotMoveStrategy {
        {abstract} + move()
    }
  }
  

  namespace server {
    enum ColorEnum {
      BLACK
      EMPTY
      EMPTY_BLACK
      EMPTY_WHITE
      WHITE
    }
  }
  

  namespace server {
    class server.Field {
        - x : int
        - y : int
        + Field()
        + getColor()
        + getX()
        + getY()
        + setColor()
        + setX()
        + setY()
        + toString()
    }
  }
  

  namespace server {
    class server.Game {
        ~ blackAgreed : boolean
        ~ blackPassed : boolean
        ~ whiteAgreed : boolean
        ~ whitePassed : boolean
        ~ withBot : boolean
        {static} - instance : Game
        - listener : ServerSocket
        - moveCount : int
        - players : List<Player>
        - size : int
        {static} + getInstance()
        + getLogicController()
        + handleCommand()
        + initialise()
        - addPlayers()
        - reset()
        - runPlayers()
        - territoryAgreementFinish()
        - territoryAgreementStart()
    }
  }
  

  namespace server {
    class server.Game.BotPlayer {
        + move()
        + run()
        ~ BotPlayer()
    }
  }
  

  namespace server {
    class server.Game.RandomStrategy {
        + move()
    }
  }
  

  namespace server {
    enum GameState {
      AGREEING
      BEFORE_START
      MOVING
    }
  }
  

  namespace server {
    class server.HumanPlayer {
        ~ input : BufferedReader
        ~ output : PrintWriter
        - socket : Socket
        + HumanPlayer()
        + run()
    }
  }
  

  namespace server {
    class server.LogicController {
        ~ blackScore : int
        ~ whiteScore : int
        + LogicController()
        + changePlayer()
        + findDeadGroups()
        + findGroupWithStone()
        + getBoard()
        + getCurrentPlayer()
        + getScore()
        + isMoveLegal()
        + setCurrentPlayer()
    }
  }
  

  namespace server {
    class server.Main {
        {static} + main()
    }
  }
  

  namespace server {
    abstract class server.Player {
        + alive : boolean
        ~ kill()
    }
  }
  

  namespace server {
    class server.ProtocolServer {
        - output : PrintWriter
        + ProtocolServer()
        + sendScores()
        + startGame()
        + surrender()
        ~ invalidMove()
        ~ sendBoard()
        ~ startAgreeing()
        ~ territoryDisagreement()
        ~ validMove()
    }
  }
  

  namespace server {
    class server.Server {
        {static} - port : int
        - size : int
        - withBot : boolean
        + Server()
        + start()
    }
  }
  

  namespace server {
    class server.StoneGroup {
        - stones : ArrayList<Field>
        + StoneGroup()
        + addStone()
        + containsStone()
        + getBoard()
        + getColor()
        + getSize()
        + getStones()
        + hasBreath()
    }
  }
  

  server.Field o-- server.ColorEnum : color
  server.Game o-- server.GameState : gameState
  server.Game o-- server.LogicController : logicController
  server.Game +-down- server.Game.BotPlayer
  server.Game +-down- server.Game.RandomStrategy
  server.Game.BotPlayer -up-|> server.Player
  server.Game.BotPlayer o-- server.BotMoveStrategy : botMoveStrategy
  server.Game.BotPlayer o-- server.Game : game
  server.Game.RandomStrategy .up.|> server.BotMoveStrategy
  server.HumanPlayer -up-|> server.Player
  server.HumanPlayer o-- server.ProtocolServer : protocol
  server.LogicController o-- server.Field : koKilled
  server.LogicController o-- server.Field : koKiller
  server.LogicController o-- server.Board : board
  server.LogicController o-- server.ColorEnum : currentPlayer
  server.Player o-- server.ColorEnum : color
  server.StoneGroup o-- server.Board : board
  server.StoneGroup o-- server.ColorEnum : color


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
